<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title>Randomization testing</title>
    <link href="https://wkristan.github.io/style.css" rel="stylesheet" type="text/css">
    <script src="https://wkristan.github.io/main.js"></script>
  </head>
  <body>
    <div id="header">
      <div style="float: left"><button onmouseover="navToggle()">â˜°</button></div>
      <h1 style="text-align: center;">Exercise 10 - randomization testing</h1>
    </div>
    <div id="navigation" style="display:none" onclick="navToggle()">
      <p><a href="#intro">Why use randomization testing?</a></p>
      <p><a href="#diffs_btwn_means">Difference between two means</a></p>
      <p><a href="#first_pgm">First program</a></p>
      <p><a href="#second_pgm">Second program</a></p>
      <p><a href="#third_pgm">Third program</a></p>
      <p><a href="#assignment">Assignment</a></p>
    </div>
    <div id="content">
      <h2 class="part" id="intro">Why use randomization testing?</h2>
      <p>In your statistics class you learned a variety of powerful methods for
        testing for differences between treatment groups (i.e. t-tests, analysis
        of variance), and for relationships between two continuous variables
        (i.e. regression, correlation). Although these techniques are the best
        available when you meet the assumptions they make about your data, they
        can give incorrect results if your data don't meet the assumptions.</p>
      <p> </p>
      <p>There are several assumptions that must be met to use these techniques:</p>
      <p> </p>
      <ul>
        <li>
          <p>Independence of observations</p>
        </li>
        <li>
          <p>Normality of data</p>
        </li>
        <li>
          <p>Homogeneous variances (between groups, or of residuals)</p>
        </li>
      </ul>
      <img src="dist_of_diffs.png" style="float:left; margin-right: 10px">
      <p>When we're doing statistical hypothesis testing, a probability
        distribution is used as a mathematical model of how random samples from
        a population should behave. The t-distribution is a good model for the
        distribution of means of samples taken from a population, or of
        differences between two random samples from the same distribution - it's
        therefore called a <strong>sampling distribution</strong>. If we meet
        the assumptions the t-distribution is based on, we can use it to
        calculate the probability of observing differences between our treatment
        and control group means by random chance - this probability is called
        the <strong>p-value</strong>. If we don't meet the assumptions of the
        t-test, then the t-distribution is no longer a good model for random
        sampling from a population, and if we use it as a sampling distribution
        to obtain a p-value, we will probably not get accurate results.</p>
      <p> </p>
      <p>When you don't meet the assumptions of a particular test, though, all
        is not lost. It's possible to use a <strong>resampling</strong>
        approach to generate a sampling distribution just from the data in hand,
        without reference to any mathematical model of sampling from a
        population. The histogram shows 1,000 t-values generated by randomly
        shuffling the data between two groups from a single sample, and you can
        see that the distribution of t-values is roughly bell-shaped, to the
        point that the t-distribution superimposed on it in red matches fairly
        closely. We can thus use the set of 1,000 differences in place of a
        t-distribution to calculate p-values.</p>
      <p>Resampling approaches are appropriate for a very wide array of
        analytical problems in Biology, and can be used in place of all the
        common techniques you've learned in your stat class. These techniques
        make no specific assumptions about the distribution of the data, don't
        require that the distributions are the same between groups, and don't
        even require that the data points are independent of one another. The
        only assumption they make is that the sample in hand provides the best
        information available about the distribution of data in the population
        as a whole. When your data meet the assumptions of a t-test, ANOVA, or
        regression, then randomization tests will be slightly less powerful
        (i.e. slightly less likely to detect a real experimental effect), so you
        are better off using the standard techniques. But, when your data don't
        meet these tests' assumptions, you are better off using a resampling
        approach. </p>
      <p> </p>
      <p>We will use <strong>randomization tests</strong> today as an example
        of the resampling approach to hypothesis testing. Randomization testing
        is not a standard part of commonly used statistical software, but it's
        not too difficult to implement the technique using macros in Excel.</p>
      <p> </p>
      <h2 class="part" id="diffs_btwn_means">A randomization test for
        differences between two means</h2>
      The data we will use was included as an example in Whitlock and Schluter's
      "The Analysis of Biological Data".<br>
      <p>During mating, sockeye salmon males are bright red due to carotenoid
        pigments found in the food they eat. Salmon are not able to synthesize
        carotenoids themselves. Kokanee salmon are landlocked sockeye salmon
        that live their entire lives in fresh water; they spend their adulthood
        in a lake, then spawn in streams and rivers that feed the lake. </p>
      <p>Carotenoid pigments are not as common in fresh water as they are in
        salt water foods, yet kokanee males are red during the breeding season
        just like sockeye males. Researchers interested in how kokanee manage to
        turn red when they have little access to carotenoids hypothesized that
        they may be more efficient at storing carotenoids than their ocean-run
        relatives. They established two different groups of fish in aquaria,
        ocean-run male sockeye and male kokanee. They fed both on the same diet
        with low levels of carotenoid pigments. After the males reached maturity
        they measured their color using a colorimeter (an electric device that
        measures the intensity and wavelength of colors). The colorimeter
        wavelengths are then represented as a "color score" which indicates the
        redness of the value; the larger the value the more brightly red is the
        male. Your task is to test whether kokanee are brighter red than male
        sockeye when fed a diet poor in carotenoids. </p>
      <table width="100%">
        <tbody>
          <tr>
            <td>
              <p><img style="width: 303px; height: 407px;" alt="The data" src="whitlock_ques_13.20.jpg"
                  vspace="5" hspace="15" align="left">The histograms to the left
                should give you an idea of why a t-test is not a good choice -
                the color measurements have very different distributions between
                the two species, with very different variances, and the sockeye
                distribution is nowhere near normal. If we were to test for lack
                of normality (with an Anderson-Darling test) and lack of HOV
                (with a Levene's test) we would fail both tests.</p>
              <p> </p>
              <p>So, we need to use a randomization test instead, because we
                can't assume normality or HOV. To know whether our results are
                likely to be just due to random sampling, we need to know how
                different two samples can be just due to random chance. To know
                this, we need many, many random samples, but we only have one.
                How do we generate the random samples we need?</p>
            </td>
          </tr>
          <tr>
            <td><br>
            </td>
          </tr>
          <tr>
            <td>
              <p><img alt="Actual grouping" src="actual_groups.png" hspace="5" align="left">The
                way that randomization tests get around this problem is very
                clever. First, we start by realizing that if there really isn't
                any difference in skin color between kokanee and sockeye males,
                then calling them "kokanee" and "sockeye" is arbitrary - it's a
                distinction without a difference. If that's right, then
                essentially the names are randomly assigned to the skin color
                numbers, and randomly re-assigning them should give us
                differences in means that are essentially the same as what we
                actually see. For example, here is a graph showing the actual
                distribution of skin color measurements for the two groups. The
                mean for kokanee is 1.72, and for sockeye it's 0.99, for a
                difference of 0.73. It looks like sockeyes tend to be less red,
                but this could be due to random chance. What would the data look
                like if we randomly assigned data values to salmon species?</p>
            </td>
          </tr>
          <tr>
            <td><br>
            </td>
          </tr>
          <tr>
            <td>
              <p><img alt="First random shuffle" src="rand1.png" hspace="5" align="left">Here's
                one such random assignments. The color of the points still
                indicates the actual species, but the position along the x-axis
                indicates the group the data points are assigned to - you can
                see some kokanee are assigned to the sockeye group and vice
                versa. The mean for the random grouping is 1.39 for kokanee and
                1.39 for sockeye, for a difference of 0. This is a much smaller
                difference than before, so it makes the actual amount of
                difference we observed look big compared to random chance. But,
                we can't tell much from just one random shuffle, so let's
                shuffle again.</p>
            </td>
          </tr>
          <tr>
            <td><br>
            </td>
          </tr>
          <tr>
            <td>
              <p><img alt="Second shuffle" src="rand2.png" hspace="5" align="left">This
                random shuffle also makes the observed data look pretty
                non-random - the mean for kokanee is 1.39, and the mean for
                sockeye is 1.38, for a difference of 0.01.</p>
              <br>
              <p> So, it's starting to look like the difference we observed is
                pretty unlikely to occur by random chance.</p>
            </td>
          </tr>
          <tr>
            <td><br>
            </td>
          </tr>
          <tr>
            <td>
              <p><img alt="Most extreme" src="Rplot01.png" hspace="5" align="left">But,
                lest we jump to conclusions, here is a possible grouping of the
                data that would give an even bigger difference than we saw in
                our observed data - you see that there was one sockeye male that
                was redder than on kokanee male, and when we switch those two
                data points we get means of 1.72 and 0.98, for a difference of
                0.94 - just slightly more than actually observed.</p>
              <br>
              <p> So, what we should expect is that over many random re-shuffles
                of data to species type, we will rarely if ever see differences
                between random groupings that are bigger than what we actually
                observed. If we count up the number of times we see bigger
                differences in random groups than in our actual groups, we can
                divide this by the number of random re-groupings we produced,
                and this will give us the probability of seeing a difference as
                big as we observed by random chance.</p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>The general procedure you will use to test for this difference will be:</p>
      <p> </p>
      <ul>
        <li>Measure the actual difference between groups using an appropriate
          test statistic, and record it<br>
        </li>
        <li>Randomly sort the color data, but not the salmon species, so that
          color index values are randomly assigned to species</li>
        <li>Measure the difference in randomly assigned color scores between
          salmon species using the same test statistic, and record it</li>
        <li>Repeat many times (1,000)<br>
        </li>
        <li>Count the number of times that randomly generated differences are as
          great or greater than the observed difference (plus 1), then divide by
          the number of randomly generated differences (plus 1) - this is your
          p-value</li>
        <li>If p &lt; 0.05, reject the null hypothesis of no difference between
          sockeye and kokanee colors - look at the means to determine which
          species is redder<br>
        </li>
      </ul>
      We'll do a couple of variations on the same procedure to give you a chance
      to check your understanding of the program.<br>
      <h3 class="part" id="first_pgm">First program:</h3>
      <p> <strong><input name="cb1" type="checkbox">Step 1 - download this <a
            href="salmon_skin_color.xlsm">file</a>, save it to your H: drive,
          and open it. </strong></p>
      <p>The file format is a "macro-enabled worksheet", and has the file
        extension "xlsm". Macros are very useful, but they can also be used to
        deliver computer viruses, so Microsoft has made a different version of
        its spreadsheet file format in which macros can be used. This gives
        users some warning that the sheet they are about to open has macros in
        it that can be run when opened - if the user isn't expecting a macro to
        be in the file, they can choose not to open it to avoid infecting their
        computers. If macros are stored in the standard file format, they can be
        opened and viewed, but they won't run.</p>
      <p> You'll see that there are two columns, one identifying the species
        (kokanee or sockeye), and the other giving the skin color measurement.</p>
      <p> <strong><input name="cb2" type="checkbox">Step 2 - generate the
          summary statistics needed for the test.</strong></p>
      <p>Use a pivot table to calculate three summary statistics for each
        species: mean skin color score, standard deviation of skin color score,
        and sample size. Use species as row labels, and have each summary
        statistic in a different column. Put the pivot table in the Two Group
        sheet, starting in cell A40. When you're done, it should look like <span
          class="popup">this<img class="popupimage" src="pivot_table.jpeg"></span>.</p>
      <p> It's possible to turn off the annoying "GetPivotData" function that
        crops up when you select a cell from a pivot table. Select the File menu
        in the upper left corner of the sheet, then select "Options" from the
        bottom of the menu. Switch to the "Formulas" tab, and un-check the "Use
        GetPivotData functions for PivotTable references" option in "Working
        with formulas". You will now be able to click on cells within a pivot
        table and just get the cell reference returned.</p>
      <p> <strong><input name="cb3" type="checkbox">Step 3 - calculate the
          observed test statistic.</strong> </p>
      <p>Even though we can't use the t-distribution to calculate our p-value,
        we can still use the t test statistic as a convenient measure of how
        different the groups are. The t-statistic measures how many standard
        errors are between the group means.</p>
      <p> </p>
      <p> In cell E40 type "Pooled variance". In cell E41 calculate the pooled
        variance for both kokanee and sockeye. This is the variance of the
        difference between the means. The formula for pooled variance is:</p>
      <p> </p>
      <img src="pooled_variance.png" alt="Pooled variance">
      <p> </p>
      <p> Translate this into a spreadsheet formula - n<sub>1</sub> and s<sub>1</sub>
        are kokanee standard deviation and sample sizes,&nbsp;n<sub>1</sub> and
        s<sub>1</sub> are sockeye standard deviations and sample sizes,
        and&nbsp;n<sub>1</sub> + n<sub>2</sub> is the total sample size. </p>
      <p>Next, type "Pooled standard error" into cell F40, and in F41 calculate
        the pooled standard error. The formula is:</p>
      <p> </p>
      <p> <span class="Excel"><img src="pooled_se.png" alt="Pooled se"></span></p>
      <p> </p>
      <p> Finally, in cell G40 type "t", and in G41 calculate the observed
        t-value. The formula is:</p>
      <p> </p>
      <img src="t_observed.png" alt="Observed t-value">
      <p> </p>
      <p> Since you have not yet randomly shuffled the data, this is the actual
        observed t-value. Copy it and paste-special the cell value to cell A47,
        then type "Observed t" in cell A46.</p>
      <p> </p>
      <p> <strong><input name="cb4" type="checkbox">Step 4 - set up the data
          for random shuffling. </strong></p>
      <p>Randomization tests are done by randomly shuffling the data - that is,
        the same set of skin color values are used every time, but the are
        randomly re-assigned to either the kokanee or sockeye groups by randomly
        sorting the data values while leaving the species labels in place. Each
        data value is only used once, and the sample sizes stay the same for
        each group for each shuffle.</p>
      <p>The first thing to do is to record the original sort order of the data
        so that you can get it back later if you need to (and you <span style="font-style: italic;">will</span>
        need to). In cell C1 type "Original order", then in the cells below
        number from 1 to 35. You can do this quickly by typing a 1 in cell C2,
        selecting cells C2 to C36, then selecting "Fill" â†’ "Series..." from the
        right side of the "Home" tab. The default option is a "linear" series
        with a step value of 1, meaning that it will increase by 1 for every
        selected row.</p>
      <p> </p>
      <p> Next, type "Randomizer" in cell D1, and in cell D2 type in the
        "rand()" function, which will give you a random uniform number between 0
        and 1 with 15 decimal places of precision. Copy and paste the rand
        function to cells d2 through d36. You will use the randomizer column to
        sort the skin color and original order columns, but not the species
        column. Because this is a function it will re-calculate each time the
        worksheet changes, so we can randomly shuffle the data repeatedly by
        sorting on this column again and again. You will probably not see the
        random numbers in order, because the sorting and re-calculating happens
        so quickly that a new set of random numbers appears before you can see
        the old set sorted in order.</p>
      <p> </p>
      <p> <strong><input name="cb5" type="checkbox">Step 5 - set up a column to
          record the randomized t-values. </strong></p>
      <p>In cell I1 type "Randomized t-values". It's important to use column I,
        because as the test runs we will be filling in 1000 rows for this
        column, and we don't want to write over part of the pivot table, or the
        t-value calculation, which are in columns E through G.</p>
      <p> </p>
      <p> <strong><input name="cb6" type="checkbox">Step 6 - record the macro.
        </strong></p>
      <p>You are now ready to use Excel's macro recorder to record the procedure
        you will use for each repetition. You might want to run through the
        instructions in the bulleted list below without the macro recorder on so
        that you know what you're going to do - the recorder will record
        everything you do, including if you select the wrong cells or scroll
        around trying to figure out where things are, and all these actions will
        leave some unneeded steps in your macro that will slow down its
        execution later.</p>
      <p>Once you're sure you know what you need to do, click on "Macros" from
        the "View" tab and then "Record macro". Call the macro "RandTest", and
        assign it the shortcut key of capital R (ctrl+shift+R). Use the default
        "Store macro in this workbook" option. You can write in a description as
        well - something like "Randomization test for color differences between
        kokanee and sockeye salmon".</p>
      <p> </p>
      <p> Now, while the macro recorder is on, do the following:</p>
      <p> </p>
      <p> </p>
      <ul>
        <li>
          <p>Select cells B1 through D36 - this omits the species names, but
            that's intentional...it's very important that you NOT select the
            species. Switch to the Home tab, and under "Sort and Filter" select
            "Custom sort". Sort the data on the "Randomizer" column. This will
            randomly sort the color index values and the original order values,
            while leaving the species unsorted.</p>
          <p> </p>
        </li>
      </ul>
      <p> </p>
      <ul>
        <li>
          <p> Click into the pivot table, then right-click and select "Refresh".
            This will update the pivot table with a new set of averages and
            standard deviations, and will also cause the t-value to recalculate.</p>
        </li>
      </ul>
      <p> </p>
      <ul>
        <li>
          <p> Select the t-value in cell G41, right-click, and copy.</p>
        </li>
      </ul>
      <p> </p>
      <ul>
        <li>
          <p> Select cell I2, right-click and paste-special "Values".</p>
        </li>
      </ul>
      <p> </p>
      <ul>
        <li>
          <p> In the "View" tab, click on "Macros" and turn off the macro
            recorder.</p>
        </li>
      </ul>
      <p>If all goes well, you now have the set of steps needed in each
        iteration to generate a new random re-grouping of the data, and to
        record the t-value that results. Now you need to modify the macro to
        repeat this operation a bunch of times.</p>
      <ul>
      </ul>
      <p> </p>
      <p> <strong><input name="cb7" type="checkbox">Step 7 - modify the macro
          to add a loop.</strong></p>
      <p>Click on "Macros", "View macros", select "RandTest", and click on
        "Edit". You should see something very similar to <a class="link" style="display: none"
          href="initial_macro.jpeg">this</a><span class="ipt">this<span class="ip"><img
              src="initial_macro.jpeg"></span></span> . The commands in the main
        window are the visual basic commands that would produce the actions you
        took while the macro recorder was running. The entire macro starts with
        a Sub keyword, followed by the name of the macro we chose (RandTest),
        with parentheses indicating that we're defining a function. Sub is short
        for "subroutine", which is Basic terminology for a part of a program.
        The end of the macro is designated with the keywords "End Sub". The
        actual commands that are executed fall between the Sub and End Sub
        lines.</p>
      <p>The following explanation refers to the screen shot of my example, and
        your line numbers may be slightly different if you did anything
        different (such as selecting some cells) than I did while the macro
        recorder was running.</p>
      <p> </p>
      <p> - You first selected B1 through D36 (line 7)</p>
      <p> - You then sorted the data (lines 8 through 18)</p>
      <p> - You selected the pivot table (line 20), then refreshed it (line 21)</p>
      <p> - You selected the t-value (line 22), copied it (line 23), then
        selected cell I2 and paste-specialed the value (line 26 and 27).</p>
      <p> </p>
      <p> All that's needed now is to add a loop that will execute these
        instructions 1,000 times, and to record the result of each iteration.
        Adding the loop involves enclosing the entire recorded macro inside of a
        For...next statement. </p>
      <p>Before the "Range("B1:D36").Select" statement,type:</p>
      <p> </p>
      <p> For i = 1 to 1000</p>
      <p> </p>
      <p> and then after the last command, but before the End Sub line, write:</p>
      <p> </p>
      <p> Next i</p>
      <p> </p>
      <p> Put the For and Next at the same indent level so you can easily see
        that they match.</p>
      <p> </p>
      <p> This loop first sets the variable i equal to the value of 1, then
        moves through the Macro-recorded commands one at a time. When it gets to
        the "Next i" statement, it sets i equal to 2, then runs through the
        commands again. It continues to loop through the commands, increasing i
        by one each time, until it reaches 1000. After executing the loop for
        the 1000'th time, it leaves the loop and executes the statement
        following Next i - since there isn't a command after Next i, the program
        ends.</p>
      <p>You can click on the save icon to save your changes.</p>
      <p> </p>
      <p><strong> <input name="cb8" type="checkbox">Step 8 - run the macro. </strong></p>
      <p>At this point, you have a macro with a working loop, so go ahead and
        try it out - switch back to the worksheet and type ctrl+shift+R.</p>
      <p> </p>
      <p> You'll see that Excel starts running through the commands repeatedly.
        The only problem is that each time it runs it copies the new t-value and
        pastes it into cell I2, which is not what we want - instead, we want to
        move down one row each time and record the new t-value without
        over-writing the old ones. Which means we need to edit the macro some
        more.</p>
      <p> </p>
      <p><strong> <input name="cb9" type="checkbox">Step 9 - modify the macro
          to record the t-value each time through the loop in a different cell.
        </strong></p>
      <p>We nearly have what we need, but we need to modify the
        "Range("I2").Select" statement so that it will move down one row for
        each run through the loop. This turns out to be very simple, once you
        understand the syntax.</p>
      <p> </p>
      <p> First, you should recognize that the value of i increases by one each
        time through the loop, and we can use the value of i in our commands to
        identify a new row with each iteration. So, for example, if we want to
        select the second row of column I for the first run through the loop, we
        could ask for row i+1. The second run through the loop i will be equal
        to 2, and i+1 will be equal to 3. If we base our select statement on row
        i+1, we will select a new row each time through the loop for the
        t-values we are recording.</p>
      <p> </p>
      <p> Since we are using the column/row format to identify our cells (i.e.
        "I2" for row 2 of column I), we need a way to concatenate the column
        letter (I, which stays the same each time through the loop) with the row
        number (i+1, which changes as i increases) in the Range().Select
        statement. This can be done using the ampersand symbol (&amp;). Modify
        the Range.Select statement from:</p>
      <p> </p>
      <p> Range("I2").Select</p>
      <p> </p>
      <p> to:</p>
      <p> </p>
      <p> Range("I" &amp; i+1).Select</p>
      <p> </p>
      <p><strong> <input name="cb10" type="checkbox">Step 10 - "debug" the
          program. </strong></p>
      <p>Debugging means finding errors in the program and fixing them, but with
        any luck you don't have any errors. Even if you don't, though, you can
        use the debugging tools to "step" through the program, meaning that you
        can execute one instruction at a time and see how the spreadsheet
        changes with each step. </p>
      <p>Arrange the windows so that you can see both the spreadsheet and the
        macro code window at the same time, then select the code window to make
        it active. Now, hit the F8 key repeatedly, and watch how each row is
        highlighted one at a time. As the highlighting moves off of a row it is
        executed, and you can see the result of the command in the spreadsheet.
        Do this for several runs through the loop to get a feeling for how the
        program you've written is working.</p>
      <p>When you are done stepping through the code, you can hit the ESC key,
        or click on the "Stop" button (the little square to the right of the
        green "run" triangle at the top of the code window).</p>
      <p>Also, it would be a good idea to save your work, now that everything is
        working. You can either use File â†’ Save in the code window's menu bar,
        or click on the little antique floppy disk icon to save the sheet, along
        with your macro.</p>
      <p><strong><input name="cb11a" type="checkbox">Step 11 - the need for
          speed.</strong></p>
      <p>If you ran the macro at this point it would be pretty slow. One of the
        things you can do to speed up a macro is to turn off the screen
        redrawing. Excel doesn't need to show us what it's doing, and redrawing
        the screen is very slow compared to actually executing the commands in
        the program. To shut off screen redrawing, add a line before your For i
        = 1 to 1000 command that reads:<br>
        <br>
        Application.ScreenUpdating = False</p>
      <p>At the end of the program you want to restore any changes to Excel's
        settings to their original values so that it continues to work as you
        expect it to, so after Next i and before End Sub add the line:</p>
      <p>Application.ScreenUpdating = True</p>
      <p> If you have the time and you want to see Excel madly running through
        the commands you return to screen redrawing any time by putting a single
        quote in front of these to commands to disable them - single quotes are
        used to embed "comments" in the code, which are notes that programmers
        use to document what the program is doing, but are ignored when the
        computer runs the program. The macro editor changes the color of
        comments to green to make it easier to see which lines are meant to be
        notes, and which are lines of code to be run.<br>
        <br>
        <span style="font-style: italic;">Advanced tip: cleaning up the code</span><br>
        <br>
        This step is optional, as it has a smaller effect on execution time than
        turning off screen updating, and if done wrong it can screw up your
        macro. But, if you are making good progress, and want to speed up your
        code even more, read on.<br>
        <br>
        The other thing that helps speed up a program is to remove any commands
        that aren't needed. If you look through your code, you may see some
        commands such as "ActiveWindow.ScrollColumn = 2", or
        "ActiveWindow.LargeScroll ToRight:=-1". These were all recorded because
        you needed to scroll the window to select the cells to copy or paste,
        but Excel doesn't need them to execute the macro. You can delete any of
        these commands you find.</p>
      <p>Excel also doesn't need to select a cell within the pivot table before
        refreshing it - so, if you have a "Range("D41").Select" before the
        "ActiveSheet.PivotTables("PivotTable1").PivotCache.Refresh" statement
        you can delete the select line.</p>
      <p>The same is true for the sort - Excel is told which range to sort
        within the sort command, so the original "Range(B1:D36").Select" isn't
        needed, and you can delete it.<br>
        <br>
        Copying and pasting is also slow, and we can instead just assign the
        value of cell G41 to the output cell in column I like so:</p>
      <p>Range("I" &amp; i + ) = Range("G41").Value</p>
      <p>This line takes the place of Range("G41").Select, Selection.Copy, and
        Selection.PasteSpecial, so you can delete all of those lines.</p>
      <p> </p>
      <p><strong> <input name="cb11" type="checkbox">Step 12 - run the macro to
          conduct the test. </strong></p>
      <p>Now that you know your code is working, it's time to run it. Switch to
        the spreadsheet, and hit CTRL+SHIFT+R.</p>
      <p>Since screen re-drawing is turned off you won't see anything happening,
        but as long as you have a busy cursor let it run (it took about 20
        seconds when I tested it with all of the speedup changes in step 11
        applied, but it may be slower with all of us running this at the same
        time, particularly if you didn't make all the changes).</p>
      <p>When it's done you'll see all 1000 of the t-values for your randomly
        generated groups in column I. Now we need to know how many of those were
        bigger than our observed t-value of 10.3.</p>
      <p> </p>
      <p><strong> <input name="cb12" type="checkbox">Step 13 - count the random
          t-values that exceed the observed t-values, and generate a p-value. </strong></p>
      <p>We are now going to compare each randomly generated t-value to the
        observed t-value. The p-value tells us the probability of getting a
        t-value as large as we observed by chance, and thus we want to count up
        how often the random differences were as large or larger than the
        observed.</p>
      <p> </p>
      <p> We should consider this a two-tailed test, meaning that we should
        consider the possibility that kokanee would be less red than the sockeye
        salmon as well as the expected result that they're more red. So, when we
        do the comparison we should base it on absolute values, so that a big
        randomly-generated difference in color in either direction will be
        included in the p-value.</p>
      <p> </p>
      <p>Enter the label "Number exceeding observed" in cell A49. We can take
        advantage of the fact that "TRUE" is counted as a 1 by a computer, and
        "FALSE" is counted as a 0 to get this value. In cell A50 type:</p>
      <p><span class="Excel">=sum(abs(i2:i1001)&gt;abs(A47))</span></p>
      <p>and then make it an array formula with CTRL+SHIFT+ENTER. This will take
        the absolute value of each t-value and test whether it is greater than
        the absolute value of the observed t in cell A47. Each time the random t
        is bigger than the observed t this comparison will return TRUE (the
        boolean data value, not the word "true"). Excel treats a boolean TRUE as
        having a value of 1, so the sum of these TRUE's is equal to the number
        of times the random t's exceeded the observed t.<br>
      </p>
      <p>Copy and paste-special the value so it doesn't change when you do the
        second and third program.</p>
      <p> </p>
      <p> </p>
      <p> Now, you can calculate the p-value in cell A53 as:</p>
      <p> </p>
      <p> (# that exceeded observed + 1)/(total iterations + 1)</p>
      <p> </p>
      <p> Label this "p-value" in cell A52. If p is less than 0.05, then you
        reject the null hypothesis of no difference in color, and instead
        conclude that kokanee are redder than sockeye (based on their mean color
        scores).</p>
      <p> </p>
      <h3 class="part" id="second_pgm">Second program:</h3>
      <div>Select all the t-values from the first run and delete them.</div>
      <p> <input name="cb13" type="checkbox">Start a <strong>new</strong>
        macro, but this time use 2000 random shuffles instead of 1000. Calculate
        a p-value for this 2000 iteration version of the test, and record it in
        the worksheet. Remember to change the count of number of t's exceeding
        the observed t to reflect the larger number of iterations. Record the
        number exceeding and p-value for this version next to the values for the
        original test (cells B49 and B52, respectively).</p>
      <p>In cell B55, tell me how this increase affected the test. What's the
        smallest p-value possible with 1000 shuffles, and what is it with 2000
        shuffles?</p>
      <p> </p>
      <h3 class="part" id="third_pgm">Third program:</h3>
      <p><input name="cb14" type="checkbox">This time you will check whether it
        matters if you randomly shuffle the species labels instead of the
        measured data.</p>
      <p>Select all the t-values and delete them, so that this calculation will
        be based on the new program.<br>
      </p>
      <p>Put the data back in the original sort order - remember, don't include
        the species in this sort! Just sort the skin colors relative to the
        original order column. </p>
      <p>Then, copy the salmon species column and paste it next to the
        randomizer column (column E). Label it "Random species" in cell E1. </p>
      <p>If you select a cell in the pivot table and then switch to the
        "Analyze" tab, you can click on "Change Data Source", and extend the
        table to include this second species column. If you take out "species"
        as the row labels and put in "Random species", the t-value calculation
        should now be based on the random groupings that you'll produce in
        column E.</p>
      <p> </p>
      <p>Start a new macro, but this time randomly sort "Random species" instead
        of "skin color", using 1000 iterations. Do the necessary calculations to
        get a p-value and record it in the sheet, next to the other two
        versions, in column C.</p>
      <p>In a cell below the p-value (C55), note any differences in the results
        - does it matter whether you randomize the data or randomize the species
        names?</p>
      <h2 class="part" id="assignment">Assignment</h2>
      <p> </p>
      <p>That's it! Upload your completed file to the class web site. </p>
    </div>
  </body>
</html>
