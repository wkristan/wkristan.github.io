<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title>Exercise 2 - digital representation of base 10 numbers, letters and symbols</title>
    <link href="https://wkristan.github.io/style.css" rel="stylesheet" type="text/css">
    <script src="https://wkristan.github.io/main.js"></script>
    <script src="binary_decimal_converter.js" type="text/javascript"></script>
  </head>
  <body>
    <div id="header">
      <div style="float: left"><button onmouseover="navToggle()">â˜°</button></div>
      <h1>Exercise 2a - digitizing an analog world: numbers, letters, and symbols</h1>
    </div>
    <div id="navigation" style="display:none" onclick="navToggle()">
      <p><a href="#intro">Introduction</a></p>
    </div>
    <div id="content">
      <h2 id="intro" class="part">A little binary</h2>
      <p>We will work today on understanding how the analog properties of biological systems are translated into digital
        representations. Computers have allowed the biological sciences to make huge advances, and have become standard
        scientific tools. Representing data in a digital form is a basic requirement of using computers. Most of the
        time this translation from analog to digital doesn't cause problems, but it's important for you to understand
        that digital representations aren't perfect reproductions, and problems can arise.</p>
      <p>To complete the worksheet for today's exercise, you will need to do several things:</p>
      <ul>
        <li>Translate decimal integer numbers to binary</li>
        <li>Express decimal continuous numbers in a floating point format</li>
        <li>Translate letters to ASCII decimal codes, and then to their binary equivalents</li>
      </ul>
      <p><input name="Checkbox1" type="checkbox">A. <strong>Translate base 10 numbers to binary numbers</strong>.</p>
      <p>To understand how binary digits work, it's helpful to think clearly about what a base 10 number, like 20421,
        actually means. First, each digit in this number is an entry at a "place" - the ones place, 10's place, 100's
        place, 1000's place, and 10000's place. Each place is a power of 10 - you can see in this table that the powers
        of 10 are shown, with their decimal equivalent below them. The reason we use powers of 10 is that we have ten
        digits possible at each place - we can represent any number from 0 to 9 in the 1's place, and to represent 10 we
        need to enter a 1 in the 10's place.</p>
      <p>So, 20,421 is actually:</p>
      <table class="tableLarge">
        <tbody>
          <tr>
            <th>Base 10:</th>
            <th>10<sup>7</sup></th>
            <th>10<sup>6</sup></th>
            <th>10<sup>5</sup></th>
            <th>10<sup>4</sup></th>
            <th>10<sup>3</sup></th>
            <th>10<sup>2</sup></th>
            <th>10<sup>1</sup></th>
            <th>10<sup>0</sup></th>
            <th><br>
            </th>
            <th><br>
            </th>
          </tr>
          <tr>
            <th>Decimal equivalent</th>
            <th>10000000</th>
            <th>1000000</th>
            <th>100000</th>
            <th>10000</th>
            <th>1000</th>
            <th>100</th>
            <th>10</th>
            <th>1</th>
            <th><br>
            </th>
            <th>Decimal number:</th>
          </tr>
          <tr>
            <td>Base 10 digits</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>2</td>
            <td>0</td>
            <td>4</td>
            <td>2</td>
            <td>1</td>
            <td><br>
            </td>
            <td>20000 + 0 + 400 + 20 + 1 = 20421</td>
          </tr>
        </tbody>
      </table>
      <p></p>
      <p>To represent 20,421 we enter a 2 in the 10000's place, a 0 in the 1000's place, a 4 in the 100's place, a 2 in
        the 10's place, and a 1 in the 1's place. We then add up each of these numbers to get the decimal number of
        20421.</p>
      <p>Binary numbers work the same way, but since the only digits we can use are 0 and 1, they are base 2 instead of
        base 10. This means that the "places" in a binary number are powers of 2 instead of powers of 10.</p>
      <p>With base 2, the first position, 2<sup>0</sup>, is equal to 1, just like the 10<sup>0</sup> position in base
        10. But, since we can only use 0's and 1's as digits, we can either have 0 or 1 of these 1's, which means the
        first position can only represent a 0 or a 1. For numbers bigger than 1 we need to go to the 2<sup>1</sup>
        place.</p>
      <p>The table below will help you translate decimal numbers into binary. To use it, click on the 0's in the "Binary
        digits" row to convert them to 1's. Each time you turn a 0 to a 1 the "Decimal equivalent" number is added to
        the "Decimal number" value.</p>
      <p> As a simple example, to convert the decimal number 2 to binary we would need to put a 1 at the 2's place and a
        0 at the 1's place, so that the sum is 2+0 = 2.</p>
      <p>To fill in the answers for Question 1 on your worksheet, use the converter to find the binary representations
        for integer numbers from 0 to 10.</p>
      <table class="tableLarge">
        <tbody>
          <tr>
            <th>Base 2:</th>
            <th>2<sup>7</sup></th>
            <th>2<sup>6</sup></th>
            <th>2<sup>5</sup></th>
            <th>2<sup>4</sup></th>
            <th>2<sup>3</sup></th>
            <th>2<sup>2</sup></th>
            <th>2<sup>1</sup></th>
            <th>2<sup>0</sup></th>
            <th><br>
            </th>
            <th><br>
            </th>
          </tr>
          <tr>
            <th>Decimal equivalent</th>
            <th>128</th>
            <th>64</th>
            <th>32</th>
            <th>16</th>
            <th>8</th>
            <th>4</th>
            <th>2</th>
            <th>1</th>
            <th><br>
            </th>
            <th>Decimal number:</th>
          </tr>
          <tr>
            <td>Binary digits</td>
            <td><input value="0" onclick="changeValue(this);" id="b128" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b64" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b32" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b16" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b8" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b4" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b2" type="button"></td>
            <td><input value="0" onclick="changeValue(this);" id="b1" type="button"></td>
            <td><br>
            </td>
            <td id="decimalEquiv">0</td>
          </tr>
        </tbody>
      </table>
      <p>Some help in finding the right pattern of 0's and 1's:</p>
      <ul>
        <li>Start with the biggest decimal equivalent that is smaller than or equal to the number you are converting,
          and enter a 1. For the first number you're converting (66), 128 is too big and should stay a 0, but 64 is
          smaller than 66, so it should get a 1.</li>
        <li>Work down the list of decimal equivalents, and if adding the decimal equivalent to 64 either equals or is
          still less than 66 then put a 1 underneath it.</li>
        <li>Once your decimal number is correct, stop and record the sequence of 0's and 1's on your worksheet as the
          binary number - this is the binary equivalent to your decimal number.</li>
      </ul>
      <p><input name="Checkbox1" type="checkbox">B. <strong>Express decimal numbers in a floating point format</strong>.
        As you learned in lecture, we can represent integer numbers with binary equivalents, but for numbers with
        decimal places it is common to use floating point numbers. Floating point representations have the advantage
        that they can represent a very wide range of sizes of numbers with a relatively small number of bits, but they
        can cause some problems as well. We will explore one of the ways that floating point numbers can cause problems
        in a spreadsheet now.</p>
      <p>The first step is to fill out the floating point section of your worksheet, so you can understand how
        continuous numbers are represented in a floating point format. You'll see that the approach is similar, but not
        identical, to scientific notation.</p>
      <p>Next, you should understand the reason for <strong>floating point weirdness</strong> - that is, the inability
        of a computer to do simple calculations with floating point numbers that you could do in your head. All of the
        calculations that Excel does involves translating base 10 numbers to base 2, doing the math in base 2, and then
        translating the result back to base 10. Since not all base 10 fractional numbers can be represented perfectly in
        base 2 this translation process results in decidedly strange behavior sometimes. You can see this clearly with a
        couple of simple examples.</p>
      <p><input name="Checkbox1" type="checkbox">1. Start excel, and in cell A1 enter "Series". In cell A2 enter 0.01,
        and in cell A3 enter 0.0099 - cell A3 is thus 0.0001 less than cell A2.</p>
      <p><input name="Checkbox1" type="checkbox">2. Select cells A2 and A3 and use the fill handle to extend the series
        to cell A110. Since cell A3 is 0.0001 less than A2, this will create a series in which each cell is 0.0001 less
        than the one before.</p>
      <p><input name="Checkbox1" type="checkbox">3. Now look at cell A102 - if you did it right you will see the number
        6.07E-17. Computers represent scientific notation this way, so E-17 meaning "10<sup>-17</sup>". The cell before,
        A101, is showing 0.0001, so subtracting 0.0001 from that should be...what? One of the first things you learn
        about subtraction is that any number subtracted from itself is 0, right? You've probably known that since first
        grade, and can figure it out in your head. But Excel, for all its sophistication, thinks that 0.0001 - 0.0001 is
        6.07 x 10<sup>-17</sup> (a very small number, granted, but not 0). The next cell is formatted as -1E-04 (which
        is -0.0001 in scientific notation), so aside from sticking with scientific notation Excel seems to come to its
        senses after one glitch.</p>
      <p>So, what happened? In cell B102 enter the formula <span class="Excel">=0.0001 - 0.0001</span>, and you'll see
        that the answer is 0 (we'll learn about cell formulas later, but for now all you need to know is that using an =
        tells Excel to do a calculation). Obviously, Excel does know that a number subtracted from itself is 0. Why can
        it get it right if we do the calculation like this, but wrong if we do the calculation as a series?</p>
      <p><input name="Checkbox1" type="checkbox">4. To see what's going on, make column A wider, select cells A2 through
        A101, and then increase the number of decimals displayed by clicking on the "Increase Decimal" button, <img alt="Increase decimal"
          src="incr_decimal.png">, until you can see all 15 of the significant digits. You'll see that although Excel is
        only displaying the first four decimal places by default, starting in cell A10 the actual value stored has a
        digit at the 17th decimal place that should be 0 but isn't. </p>
      <p>When Excel makes a series, it starts with the two numbers you selected and subtracts the first from the second
        to decide how much difference there is between cells, and then when it calculates the next number in the series
        it adds that difference to the last filled in cell. To see how much difference Excel thinks there is between the
        first two cells, in cell B3 enter <span class="Excel">=A3-A2</span>, and then increase the decimals, and you'll
        see that Excel thinks that there is a difference of -0.0000999999999999994 between 0.01 and 0.0099, instead of
        -0.0001 - this is a small error numerically speaking (0.0000000000000000006 is only 0.0000000000006% of the
        actual difference), and in many calculations you might do it would not have an effect on the result. Of course,
        considering how simple the calculation is you might find it surprising that there is any error at all, but at
        least it's just a small error.</p>
      <p>But, bear in mind that as the value of -0.0000999999999999994 is added to each cell to calculate the next in
        the series this small error accumulates. Because Excel knows that floating point math causes small errors like
        this it notices that there is a long string of 0's before the final non-zero digits, and it rounds the display
        to the fourth decimal place (it doesn't change the cell value, but it does change the display to show you what
        you expect to see). </p>
      <p>The reason you finally see the error in cell A102 is that all the digits in the first four decimal places go to
        0 in cell A102, and all that's left to display are the digits that were added due to the floating point math
        errors at the 16th decimal place and beyond, so those are displayed.</p>
      <p><input name="Checkbox1" type="checkbox">5. Does this matter? Most of the time such a tiny numerical error
        wouldn't cause problems, but sometimes it does. For example, in cell B100 enter the formula <span class="Excel">=0.0002/A100</span>
        - this formula divides 0.0002 by the value in cell A100, which is also supposed to be 0.0002, and displays the
        result as 1. If you increase the decimal places you'll see the value is actually 0.9999999999997, but the error
        of 0.0000000000003 is tiny and Excel rounds to the correct value of 1.</p>
      <p>But, if you copy cell B100 and paste it to cells B101 and B102 you will get the result of dividing 0.0002 by
        the numbers in cell A101 and A102 respectively. You'll see that everything is still okay for cell B101 (you are
        dividing 0.0002 by a number that is supposed to be 0.0001, and you get a value very close to 2 as a result), but
        in cell B102 you get a massive number of 3294061441733.85. This is because in cell B102 you are dividing 0.0002
        by the tiny number in cell A102, instead of dividing by the 0 that is supposed to be there. Dividing by 0 should
        result in an error, since dividing by 0 is undefined mathematically, but instead you get a huge number. If you
        were writing a program that relied on dividing one floating point number by another you may think to check
        whether you were dividing by 0 and protect against this error in your program, but you may not think to check
        whether you were dividing by a tiny number that is supposed to be 0, and you could end up producing answers that
        are wildly off. These sorts of floating point arithmetic errors can cause problems in the real world (<a href="http://ta.twi.tudelft.nl/users/vuik/wi211/disasters.html">rockets
          blowing up</a>, for example).</p>
      <p>It may seem like the purpose of teaching you this is to make you less trusting of computers, but that's not
        really the goal - most of the time these sorts of errors are so small as to be safely ignored. The real
        take-home message is this: YOU ARE RESPONSIBLE FOR YOUR ANALYSIS! Computers are amazingly useful tools, but
        converting our base 10, analog world into a computer's base 2 digital world doesn't work perfectly, and even
        seemingly simple operations can lead to surprising results if you aren't aware of a computer's limitations.</p>
      <h2>Representing letters, numbers, and symbols using ASCII codes</h2>
      <p>Computers understand only 0 and 1, but are able to work with letters and symbols using systems of numeric
        codes. A common, popular system is the ASCII system, which stands for American Standard Code for Information
        Interchange. ASCII characters are used in the text file format, which is one of the most universally supported
        file formats in the world. In an ASCII formatted file, the integer numbers that are recorded are interpreted as
        codes for letters, symbols, and numbers.</p>
      <p>The first 32 ASCII characters are "control" characters that were used to tell printers how to format output, so
        we will skip over those. The numbering starts at 0, so 32nd control character is represented by the number 31.
        Codes for symbols (such as punctuation) start at the 33rd character, represented by the number 32. You can use
        the binary translator above to see that the number 32 is represented with the binary number 00100000 - as long
        as the program you are using knows that this is an ASCII code it would translate this number to its ASCII
        equivalent, which is a blank space.</p>
      <p>A table of ASCII codes is here:</p>
      <p> </p>
     
      <p><input name="Checkbox1" type="checkbox">C. <strong>Translate letters to ASCII decimal codes, and then to
          binary</strong>. Use the table <a href="http://www.ascii-code.com/">here</a> for the translation to decimal
        codes (the first column, labeled DEC).</p>
    </div>
  </body>
</html>
